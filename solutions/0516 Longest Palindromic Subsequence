// method 1: dp1.
class Solution {
public:
    int longestPalindromeSubseq(string s) {
        int n = s.size();
        if(n<2) return n;
        // dp[i][j]: maxLen of palindromic subsequence of in s[i,j]
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for(int j=0; j<n; j++){
            dp[j][j] = 1;
            for(int i=j-1; i>=0; i--){
                if(s[i]==s[j]) dp[i][j] = 2 + dp[i+1][j-1];
                else dp[i][j] = max(dp[i+1][j], dp[i][j-1]);
            }
        }
        return dp[0][n-1];
    }
};

// method 1: dp2.
class Solution {
public:
    int longestPalindromeSubseq(string s) {
        int n = s.size();
        if(n<2) return n;
        // dp[i][j]: maxLen of palindromic subsequence of in s[i,j]
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for(int i=n-1; i>=0; i--){
            dp[i][i] = 1;
            for(int j=i+1; j<n; j++){
                if(s[i]==s[j]) dp[i][j] = 2 + dp[i+1][j-1];
                else dp[i][j] = max(dp[i+1][j], dp[i][j-1]);
            }
        }
        return dp[0][n-1];
    }
};
