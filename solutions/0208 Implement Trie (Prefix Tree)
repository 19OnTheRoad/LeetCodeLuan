class Trie {
public:
    /** Initialize your data structure here. */
    struct TrieNode{
        vector<TrieNode*> next = vector<TrieNode*>(26, NULL);
        bool isWord = false;
    };
    TrieNode *root = new TrieNode();
    Trie() { }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        TrieNode  *p = root;
        for(char c: word){
            int i = c -  'a';
            if(!p->next[i]) p->next[i] = new TrieNode();
            p = p->next[i];
        }
        p->isWord = true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        TrieNode *p = find(word);
        return p && p->isWord;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        return find(prefix) != NULL;
    }
    TrieNode* find(string s){
        TrieNode  *p = root;
        int n = s.size();
        for(int i=0; i<n && p; i++){
            p = p->next[s[i]-'a'];
        }
        return p;
    }
};
