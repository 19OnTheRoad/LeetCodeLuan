class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obs) {
        int m = obs.size(), n = obs[0].size();
        vector<vector<unsigned int>> dp(m+1, vector<unsigned int>(n+1, 0));    // dp[i][j]: uniquePaths from [0][0] to [m-1][n-1].
                                                                               // must use unsigned int, because int/long will overflow.
        dp[0][1] = 1;
        //if(obs[0][0]==1 || obs[m-1][n-1]==1) return 0;
        for(int i=1; i<=m; i++){
            for(int j=1; j<=n; j++){
                if(obs[i-1][j-1]==0) dp[i][j] = dp[i-1][j] + dp[i][j-1];
                else dp[i][j] = 0;
            }
        }
        return dp[m][n];
    }
};
