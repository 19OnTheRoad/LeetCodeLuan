// method 1: dp1.
// time: O(n^2), space: O(n^2).
class Solution {
public:
    string longestPalindrome(string s) {
        int n = s.size(), start = 0, maxLen = 0;
        // dp[i][j]: s[i, j] is palindrome or not.
        vector<vector<bool>> dp(n, vector<bool>(n, false));
        for(int i = n-1; i>=0; i--){
            for(int j = i; j<n; j++){
                dp[i][j] = s[i] ==s[j] && (j-i<3 || dp[i+1][j-1]);
                if(dp[i][j] && maxLen < j-i+1){
                    start = i;
                    maxLen = j - i + 1;
                }
            }
        }
        return s.substr(start, maxLen);
    }
};

// method 1: dp2.
// time: O(n^2), space: O(n^2).
class Solution {
public:
    string longestPalindrome(string s) {
        int n=s.size(), start = 0,  maxLen = 1;
        if(n<2) return s;
        // dp[i][j]: s[i,j] is palindrome or not
        vector<vector<bool>> dp(n, vector<bool>(n, false));
        for(int j=0; j<n; j++){
            for(int i=j; i>=0; i--){
                dp[i][j] = s[i]==s[j] && (j-i<3 || dp[i+1][j-1]);
                if(dp[i][j] && (j-i+1>maxLen)){
                    maxLen = j-i+1;
                    start = i;
                }
            }
        }
        return s.substr(start, maxLen);
    }
};

// method 2: extendPalindrome.
// time: o(n^2).
class Solution {
public:
    string longestPalindrome(string s) {
        int n = s.size(), start = 0, maxLen = 0;
        for(int i = 0; i<n; i++){
            extendPalindrome(s, i, i, n, start, maxLen);
            extendPalindrome(s, i, i+1, n, start, maxLen);
        }
        return s.substr(start, maxLen);
    }
    void extendPalindrome(string&s, int i, int j, int &n, int &start, int &maxLen){
        while(0<=i && j<n && s[i]==s[j]){
            i--, j++;
        }
        if(maxLen<j-i-1){
            start = i+1;
            maxLen = j - i - 1;
        }
    }
};

// method 3: skipDuplicate.
// best case: s="aaaaaa.....aaaaa", time: O(n)
// worst case: s="babababab.....babababab", time: O(n^2) 
// average time: maybe O(n).        
class Solution {
public:
    string longestPalindrome(string s) {
        int n = s.size(), start = 0, maxLen = 0;
        for(int mid = 0; mid<n; ){
            int i = mid, j = mid;
            // Skip duplicate characters in the middle
            while(j+1<n && s[j]==s[j+1]) j++;
            // very important........
            mid = j + 1;
            while(0<=i-1 && j<+1<n && s[i-1]==s[j+1]) {
                i--, j++;
            }
            if(maxLen < j-i+1){
                maxLen = j - i + 1;
                start = i;
            }
        }
        return s.substr(start, maxLen);
    }
};

// method 2: Manacher.
// time: O(n)
class Solution {
public:
    string longestPalindrome(string s) {
        int sLen = s.size();
        string str(sLen * 2 + 1, '#');
        for (int i = 0, k = 1; i < sLen; i++, k += 2){
            str[k] = s[i];
        }
        int n = str.size(), R = 0,  C = 0;  
        vector<int> p(n, 0); // maxLen of palindrome which centers p[i].
        for (int i = 0; i < n; ++i){
            if (i < R)     p[i] = min(p[2 * C - i], R - i); // 2*C-i: i_mirror. ????????????????????????????????????????
                    // if p[i_mirror] + i < R,  p[i] = p[i_mirror].
                    // if p[i_mirror] + i > R,  p[i] = R - i.
            else           p[i] = 1;                        // i == R
            // p[i] = i<R ? min(p[2 * C - i], R - i) : 1;
            
            while (0 <= i - p[i] && i + p[i] < n && str[i - p[i]] == str[i + p[i]])     p[i]++;
            if (R < i + p[i]) {
                C = i;         // C: centerIdx of current longest palindrome.
                R = i + p[i];  // R: mostRightIdx of current longest palindrome.
            }
        }
        int maxRadis = 0,  maxRadisIdx = 0;
        for (int i = 1; i < n; ++i){
            if (maxRadis < p[i]){
                maxRadis = p[i];
                maxRadisIdx = i;
            }
        }
        string res(maxRadis-1, ' ');
        for (int i = maxRadisIdx - maxRadis + 1, k = 0; k < maxRadis -1 ; i += 2)
            res[k++] = str[i+1];
        return res;
    }
};
