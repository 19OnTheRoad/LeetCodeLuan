// method 1: string hash.
// time: O(n).
class Solution {
public:
    string longestPrefix(string s) {
        long h1 = 0, h2 = 0, mod = 1000000007, base = 1;
        int len = 0, n = s.size(), first = 0, last = 0;
        for(int i=0, j = n-1; j>0; i++, j--){
            first = s[i] - 'a', last = s[j] - 'a';
            h1 = (h1 * 26 + first)  % mod;
            h2 = (last * base + h2) % mod;
            base = base * 26 % mod;
            if(h1==h2) len = i + 1;
        }
        return s.substr(0, len);
    }
};

// method 2: KMP.
// time: O(n).
// KMP preprocessing: longest prefix suffix.
class Solution {
public:
    string longestPrefix(string s) {
        int n = s.size();
        vector<int> dp(n, 0); // dp: lps : longest prefix suffix.
        for(int i=1, j=0; i<n; ){
            if(s[i] == s[j]) dp[i++] = ++j;
            else if(j) j = dp[j-1];
            else i++;
        }
        return s.substr(0, dp[n-1]);    // dp[n-1]/dp.back()/j  (if j is not in for loop).
    }
};
