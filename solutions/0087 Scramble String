// method 1: dp.
class Solution {
public:
    bool isScramble(string s, string p) {
        int n = s.size();
        if(n==1) return s == p;
        //dp[len][i][j]:  s[i, i+len-1] and p[j, j+len-1] is Scramble or not.
        vector<vector<vector<bool>>> dp(n+1, vector<vector<bool>>(n, vector<bool>(n, false)));
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                dp[1][i][j] = s[i] == p[j];
            }
        }
        for(int len=2; len<=n; len++){
            for(int i=0; i<=n-len; i++){
                for(int j=0; j<=n-len; j++){
                    for(int k=1; k<len && !dp[len][i][j]; k++){
                        dp[len][i][j] = dp[len][i][j] || dp[k][i][j] && dp[len-k][i+k][j+k];
                        dp[len][i][j] = dp[len][i][j] || dp[k][i][j+len-k] && dp[len-k][i+k][j];
                    }
                }
            }
        }
        return dp[n][0][0];
    }
};

// method 2: recursive + cache.
class Solution {
public:
    bool isScramble(string s, string p) {
        unordered_map<string, bool> ump;
        return helper(s, p, ump);
    }
    bool helper(string s, string p, unordered_map<string, bool> &ump){
        if(ump.count(s+p)) return ump[s+p];
        if(s==p) return true;
        int n = s.size();
        bool res = false;
        for(int i=1; i<n; i++){
            if(helper(s.substr(0, i), p.substr(0, i), ump) && helper(s.substr(i), p.substr(i), ump)) res = true;
            if(!res && helper(s.substr(0,i), p.substr(n-i), ump) && helper(s.substr(i), p.substr(0, n-i), ump)) res = true;
        }
        return ump[s+p] = res;
    }
};
