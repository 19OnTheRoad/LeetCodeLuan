	1.quickSort.
		1.1 recursive: [low, j], [i, high] / [low, j], j+1, [i, high]. 
		1.2 iterative: [low, j], [i, high] / [low, j], j+1, [i, high].
		1.3 [low, pIdx - 1], pIdx, [pIdx + 1, high].
		1.4 three-way: [low, lt - 1], [lt, gt], [gt + 1, high].   / sort colors: [0...0, 1...1, 2...2].
	2. heapSort.
	3. mergeSort.
  
// method 1: quickSort. 1.1.
// time: O(nlogn)->O(n^2).  average time: O(nlogn).
class Solution {
public:
    vector<int> sortArray(vector<int>& nums) {
        quickSort(nums, 0, nums.size()-1);
        return nums;
    }
    void quickSort(vector<int> &nums, int low, int high){
        if(low>=high) return ;
        int pivot = nums[(low+high)/2], i = low, j = high;
        while(i<=j){
            while(i<=j && nums[i] < pivot) i++;
            while(i<=j && nums[j] > pivot) j--;
            if(i<=j) swap(nums[i++], nums[j--]);
        }
        quickSort(nums, low, j);
        quickSort(nums, i, high);
    }
};

// method 2: heapSort.
// time: O(nlogn).
class Solution {
public:
    vector<int> sortArray(vector<int>& nums) {
        int n = nums.size();
        for(int i=n/2; i>=0; i--){
            maxHeapify(nums, n, i);
        }
        for(int i=n-1; i>0; i--){
            swap(nums[i], nums[0]);
            maxHeapify(nums, i, 0);
        }
        return nums;
    }
    void maxHeapify(vector<int> &nums, int n, int i){
        int largest=i, l=2*i+1, r=2*i+2;
        if(l<n && nums[largest] < nums[l]) largest = l;
        if(r<n && nums[largest] < nums[r]) largest = r;
        if(largest != i){
            swap(nums[i], nums[largest]);
            maxHeapify(nums, n, largest);
        }
    }
};

// method 3: mergeSort.
// time: O(nlogn).
class Solution {
public:
    vector<int> sortArray(vector<int>& nums) {
        mergeSort(nums, 0, nums.size()-1);
        return nums;
    }
    void mergeSort(vector<int> &nums, int low, int high){
        if(low>=high) return ;
        int mid = (low+high)/2;
        mergeSort(nums, low, mid);
        mergeSort(nums, mid+1, high);
        int n = high - low + 1;
        vector<int> temp(n, 0);
        int i = low, j = mid + 1, k  = 0;
        while(i<=mid && j<=high){
            if(nums[i]<=nums[j]) temp[k++] = nums[i++];
            else  temp[k++] = nums[j++];
        }
        while(i<=mid) temp[k++] = nums[i++];
        while(j<=high) temp[k++] = nums[j++];
        for(i = low, k = 0; i<=high; i++, k++){
            nums[i] = temp[k];
        }
    }
};
