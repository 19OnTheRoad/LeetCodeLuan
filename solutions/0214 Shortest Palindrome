// same as to find: longest prefix palindrome.
// 'We can convert it to an alternative problem"find the longest palindrome substring starts from index 0".'

// method 1: skipDuplicates.
// time: O(n)->O(n^2).
// 1. maxLen of palindromic prefix substrings.
// 2. skip duplicates.
class Solution {
public:
    string shortestPalindrome(string s) {
        // here maxLen: maxLen of palindromic prefix substrings.
        int n=s.size(), maxLen=1;
        if(n<2) return s;
        for(int mid=0; mid<=n/2; ){
             int i=mid, j=mid;
            while(j+1<n && s[j]==s[j+1]) j++;
            // skip duplicates.
            mid=j+1;
            while(0<=i-1 && j+1<n && s[i-1]==s[j+1]) {i--; j++;}
            if(i==0)    maxLen=max(maxLen, j-i+1);
        }
        string remain=s.substr(maxLen);
        reverse(remain.begin(), remain.end());
        return remain+s;
    }
};

// method 2: KMP
// time: O(n).
class Solution {
public:
    string shortestPalindrome(string s) {
        string rev_s = s;
        reverse(rev_s.begin(), rev_s.end());
        string str = s + "#" + rev_s;
        int sLen = s.size(), n = 2*sLen + 1;
        
        vector<int> lps(n, 0);
        for (int i = 1, j=0; i < n; ) {
            if(str[i] == str[j]) lps[i++] = ++j;
            else {
                j>0 ? j = lps[j-1] : i++;
            }
        }
        // lps: longest prefix and suffix substring of str.
        // lps: longest prefix palindromic substring of s.
        return rev_s.substr(0, sLen - lps[n - 1]) + s;
    }
};

// method 3: Manacher1.
class Solution {
public:
    string shortestPalindrome(string s) {
        int sLen = s.size(), n = 2*sLen +1;
        string str(n, '#');
        for(int i=0, k=1; i<sLen; i++, k+=2){
            str[k] = s[i];
        }
        vector<int> p(n, 0);
        int C = 0, R = 0;
        for(int i=0; i<n; i++){
            p[i] = i<R ? min(R-i, p[2*C-i]) : 1;
            while(0<=i-p[i] && i+p[i]<n && str[i-p[i]]==str[i+p[i]]) p[i]++;
            if(R<i+p[i]){
                R = i + p[i];
                C = i;
            }
        }
        int maxLen;
        for(int i=n-1; i>=0; i--){
            if(i + 1 == p[i]){
                maxLen  = p[i] - 1;
                break;
            }
        }
        if(maxLen == sLen) return s;
        string remain = s.substr(maxLen);
        reverse(remain.begin(), remain.end());
        return remain + s;
    }
};

// method 4: Manacher2.
// time: O(n).
class Solution {
public:
    string shortestPalindrome(string s) {
        string t = process(s);
        int n = t.length(), center = 0, right = 0;
        int* palin = new int[n];
        for (int i = 1; i < n - 1; i++) {
            int i_mirror = 2 * center - i;
            palin[i] = (right > i) ? min(palin[i_mirror], right - i) : 0;
            while (t[i + palin[i] + 1] == t[i - palin[i] - 1])
                palin[i]++;
            if (i + palin[i] > right) {
                center = i;
                right = i + palin[i];
            }
        }
        int pos;
        for (int i = n - 2; i; i--) {
            if (i - palin[i] == 1) {
                pos = palin[i];
                break;
            }
        }
        string tail = s.substr(pos); 
        reverse(tail.begin(), tail.end());
        return tail + s;
    }
private:
    string process(string& s) {
        int n = s.length();
        string t(2 * n + 3, '#');
        t[0] = '$'; t[2 * n + 2] = '%';
        for (int i = 0; i < n; i++)
            t[2 * (i + 1)] = s[i];
        return t;
    }
};
