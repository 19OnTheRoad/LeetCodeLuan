// method 1: two-dimension dp.
class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int n = nums.size(), sum = 0;
        for(int num: nums){
            sum += num;
        }
        if(sum&1) return false;
        int target = sum/2 ;
        
        vector<vector<bool>> dp(n+1, vector<bool>(target+1, false));
        dp[0][0] = true;
        for(int i=1; i<=n; i++){
            for(int j=1; j<=target; j++){
                if(nums[i-1]<=j)  dp[i][j] = dp[i-1][j] || dp[i-1][j-nums[i-1]];
                else              dp[i][j] = dp[i-1][j];
            }
        }
        return dp[n][target];
    }
};

// method 2: one-dimension dp.
class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int sum = 0;
        for(int i: nums){
            sum += i;
        }
        if(sum&1) return false;
        int target = sum/2;
        vector<bool> dp(target+1, false);
        dp[0] = true;
        for(int num: nums){
            for(int j=target; j>=num; j--){
                dp[j] = dp[j] || dp[j-num];
            }
        }
        return dp[target];
    }
};
