class Solution {
public:
    int countRangeSum(vector<int>& nums, int lower, int upper) {
        int n=nums.size();
        vector<long> sums(n+1, 0);
        for(int i=0; i<n; i++){
        	sums[i+1]=sums[i]+nums[i];
        }  
        return help(sums, 0, n+1, lower, upper);
    }
    int help(vector<long>& sums, int start, int end, int lower, int upper){
        if(end-start<=1)  return 0;
        int mid = (start+end)/2;
        int count = help(sums, start, mid, lower, upper)
                  + help(sums, mid, end, lower, upper);
        int i = start, a = mid, b = mid, c = mid, k = 0;
        vector<long> temp(end-start, 0);
        while(i<mid){
            while(a < end && sums[a]-sums[i] < lower) a++;
            while(b < end && sums[b]-sums[i] <= upper) b++;
            count += b - a;
            while(c < end && sums[c] < sums[i]) temp[k++]=sums[c++];
            temp[k++] = sums[i++];
        }
        while(c>start){                    // method1: begin.
            sums[--c] = temp[--k];
        }                                  // method1: end.
   /*   while(c<end){                                 // method2: begin.
            temp[k++] = sums[c++];
        }
        for(i=start, k=0; i<end; i++, k++){
            sums[i] = temp[k];
        }  */                                        // method2: end.
        return count;
    }  
};


