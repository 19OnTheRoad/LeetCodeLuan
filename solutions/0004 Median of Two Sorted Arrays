class Solution {
public:
    double findMedianSortedArrays(vector<int>& a, vector<int>& b) {
        int m = a.size(), n = b.size(), mid = (m+n+1)/2;     // be care of: mid = (m+n+1)/2; for example: 5,6.  Kth is based on 1.
        int num1 = getKth(a, 0, m-1, b, 0, n-1, mid);
        if((m+n)&1) return num1;
        int num2 = getKth(a, 0, m-1, b, 0, n-1, mid+1);
        return (num1+num2)/2.0;
    }
    int getKth(vector<int>& a, int l1, int r1, vector<int>& b, int l2, int r2, int k){
        if(l1>r1) return b[l2+k-1];
        if(l2>r2) return a[l1+k-1];
        int mid1 = (l1+r1)/2, mid2 = (l2+r2)/2;
        if(k<=(mid1-l1)+(mid2-l2)+1){                        // shrink half of larger space.
            if(a[mid1]<=b[mid2]) return getKth(a, l1, r1, b, l2, mid2-1, k);
            else                 return getKth(a, l1, mid1-1, b, l2, r2, k);
        }else{                                               // shrink half of smaller space.  shrink k.
            if(a[mid1]<=b[mid2]) return getKth(a, mid1+1, r1, b, l2, r2, k-(mid1-l1+1));
            else                 return getKth(a, l1, r1, b, mid2+1, r2, k-(mid2-l2+1));
        }
    }
};
