class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& nums, int target) {
        sort(nums.begin(), nums.end());
        vector<int> path;
        vector<vector<int>> res;
        dfs(nums, 0, target, path, res);
        return res;
    }
    void dfs(vector<int>& nums, int start, int target, vector<int> &path, vector<vector<int>> &res){
        if(target == 0){
            res.push_back(path);
            return;
        }
        for(int i=start; i<nums.size() && nums[i] <=target; i++){
            path.push_back(nums[i]);
            dfs(nums, i, target-nums[i], path, res);
            path.pop_back();
        }
    }
};
