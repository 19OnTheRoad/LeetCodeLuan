class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> dict(wordList.begin(), wordList.end());
        queue<string> que;
        que.push(beginWord);
        int ladderLen = 1;
        while(!que.empty()){
            int n = que.size();
            for(int i=0; i<n; i++){
                string word = que.front();
                que.pop();
                if(word==endWord) return ladderLen;
                for(int j=0; j<word.size(); j++){
                    char temp = word[j];
                    for(char c='a'; c<='z'; c++){
                        word[j] = c;
                        if(dict.count(word)){
                            que.push(word);
                            dict.erase(word);
                        }
                    }
                    word[j] = temp;
                }
            }
            ladderLen++;
        }
        return 0;
    }
};
