class Solution {
public:
    int findNumberOfLIS(vector<int>& nums) {
        int n = nums.size();
        if(n <= 1) return n;
        vector<int> dp(n+1, 1), cnt(n+1, 1);  // dp[i] is the length of longest subsequence ending with nums[i];
                                              // cnt[i] is total number of longest subsequence ending with nums[i];
        dp[0] = 1;
        int maxLen = 1;
        for(int j = 1; j<n; j++){
            for(int i=0; i<j; i++){
                if(nums[i] < nums[j]){        // dp[j] = max(dp[j], 1 + dp[i]);
                    if(dp[j] == dp[i]) {              //***************************************
                        dp[j] = dp[i] + 1;
                        cnt[j] = cnt[i];
                    }else if (dp[j] == dp[i] + 1){    //***************************************
                        cnt[j] += cnt[i];
                    }                      
                }
            }
            maxLen = max(maxLen, dp[j]);
        }
        int res = 0;
        for(int i = 0; i < n; i++){
            if(dp[i] == maxLen) res+= cnt[i];
        }
        return res;
    }
};
