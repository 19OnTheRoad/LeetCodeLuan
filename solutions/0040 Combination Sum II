class Solution {
public:
    vector<vector<int>> combinationSum2(vector<int>& nums, int target) {
        sort(nums.begin(), nums.end());
        vector<int> path;
        vector<vector<int>> res;
        dfs(nums, target, path, res, 0);
        return res;
    }
    void dfs(vector<int>& nums, int target, vector<int> &path, vector<vector<int>> &res, int start){
//        if(start==nums.size()) return ;
        if(target==0){
            res.push_back(path);
       //     return;
        }
        for(int i=start; i<nums.size() && nums[i]<=target; i++){
            if(i==start || nums[i]!=nums[i-1]){
                path.push_back(nums[i]);
                dfs(nums, target-nums[i], path, res, i+1);
                path.pop_back();
            }
        }
    }
};
