class Solution {
public:
    int minEatingSpeed(vector<int>& nums, int h) {
        int maxNum = -1;
        for(int num: nums){
            maxNum = max(maxNum, num);
        }
        int i=1, j=maxNum;     // here i==1, not the minNum in nums. ????????????????????????????????????????????????????
        while(i<j){
            int mid = (i+j)/2, time = 0;
            for(int num: nums){
                time += (num-1)/mid + 1;    // ??????????????????????????????????????????????????????????????????????????
            }
            if(time<=h) j = mid;
            else i = mid + 1;
        }
        return i;
    }
};
class Solution:
    def minEatingSpeed(self, nums: List[int], h: int) -> int:
        i, j = 1, max(nums)
        while i<j:
            mid = (i+j)//2
            time = 0
            for num in nums:
                time += (num-1)//mid + 1
            if time<=h: j = mid
            else: i = mid + 1
        return i
