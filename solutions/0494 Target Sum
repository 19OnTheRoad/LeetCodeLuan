// method 1: two-dimension dp.
class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int target) {
        sort(nums.begin(), nums.end());
        int n = nums.size(), sum = 0;
        for(int num: nums) sum += num;
        if(sum<target || (sum+target)&1) return 0;
        target = (sum+target)/2;
        vector<vector<int>> dp(n+1, vector<int>(target+1, 0));
        dp[0][0] = 1;
        for(int i=1; i<=n; i++){
            for(int j=0; j<=target; j++){
                if(nums[i-1]<=j) dp[i][j] = dp[i-1][j] + dp[i-1][j-nums[i-1]];
                else dp[i][j] = dp[i-1][j];
            }
        }
        return dp[n][target];
    }
};

// method 2: ond-dimension dp.
class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int target) {
        int sum = 0;
        for(int i: nums){
            sum += i;
        }
        if(sum<target || (sum+target)&1 ) return 0;
        target = (sum+target)/2;
        vector<int> dp(target+1, 0);
        dp[0] = 1;
        for(int num: nums){
            for(int i=target; i>=num; i--){
                dp[i] += dp[i-num];
            }
        }
        return dp[target];
    }
};
