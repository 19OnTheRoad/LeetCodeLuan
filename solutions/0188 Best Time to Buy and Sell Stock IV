class Solution {
public:
    int maxProfit(int KTimes, vector<int>& prices) {
        int n = prices.size();
        if(KTimes>=n/2){
            int maxPro = 0;
            for(int i=1; i<n; i++){
                if(prices[i] > prices[i-1])
                    maxPro += prices[i] - prices[i-1];
            }
            return maxPro;
        }
        vector<vector<int>> dp(KTimes+1, vector<int>(n, 0));
        for(int k=1;  k<=KTimes; k++){
            int preBuy = -prices[0];
            for(int i=1; i<n; i++){
                dp[k][i] = max(dp[k][i-1], preBuy + prices[i]);
                preBuy = max(preBuy, dp[k-1][i] - prices[i]);
            }
        }
        return dp[KTimes][n-1];
    }
};
